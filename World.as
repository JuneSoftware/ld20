package  {		import Hero;	import Ground;	import Pet;	import Wife;	import Monster;	import Welcome;	import SoundSelect;	import SoundTake;	import SoundJump;	import SoundHurt;	import SoundDone;	import flash.display.*;	import flash.geom.*;	import flash.events.Event;	import flash.ui.Keyboard;	import flash.text.*;		public class World extends MovieClip {		var bg:Background;		public var ground:Ground;		public var hero:Hero;		var wife:Wife;		var pet:Pet;		var topText:TextField = null;		var bottomText:TextField = null;		var gameInProgress:Boolean;		var welcome:Welcome;		public var wantExit:Boolean = false;		var sSelect:SoundSelect;		var sTake:SoundTake;		public var sJump:SoundJump;		var sHurt:SoundHurt;		var sDone:SoundDone;		public function World() {			trace("world");			bg = new Background();			this.addChild(bg);			// monsters			var m:Monster;			for(var i=0; i<13; i++) {				m = new Monster(this);				this.addChild(m);				switch(i+1) {					case 1: m.x = 1000; m.gotoAndStop(1); break;					case 2: m.x = 1110; m.gotoAndStop(2); break;					case 3: m.x = 1250; m.gotoAndStop(3); break;					case 4: m.x = 1330; m.gotoAndStop(2); break;					case 5: m.x = 1400; m.gotoAndStop(3); break;					case 6: m.x = 1550; m.gotoAndStop(1); break;					case 7: m.x = 1700; m.gotoAndStop(2); break;					case 8: m.x = 1900; m.gotoAndStop(3); break;					case 9: m.x = 2050; m.gotoAndStop(2); break;					case 10: m.x = 2300; m.gotoAndStop(3); break;					case 11: m.x = 2500; m.gotoAndStop(1); break;					case 12: m.x = 2700; m.gotoAndStop(2); break;					case 13: m.x = 2900; m.gotoAndStop(3); break;				}			}			wife = new Wife(this);			this.addChild(wife);						hero = new Hero(this);			this.addChild(hero);						ground = new Ground();			this.addChild(ground);			pet = new Pet();			this.addChild(pet);						welcome = new Welcome();			this.addChild(welcome);			sSelect = new SoundSelect();			sTake = new SoundTake();			sJump = new SoundJump();			sHurt = new SoundHurt();			sDone = new SoundDone();			gameInProgress = true;						this.addEventListener(Event.ENTER_FRAME, update);						addBottomText();			//bottomText.text = "Use SPACE to take";		}		function addTopText():void {			var tf:TextFormat = new TextFormat("Verdana",14,0x000000,true);			var t:TextField = new TextField();			t.defaultTextFormat = tf;			t.backgroundColor = 0xffffff;			t.background = true;			t.x = hero.x;			t.y = 80;			t.autoSize = TextFieldAutoSize.CENTER;			t.x -= t.width/2;			topText = t;			this.addChild(topText);		}		function addBottomText():void {			var tf:TextFormat = new TextFormat("Verdana",12,0x777777);			var t:TextField = new TextField();			t.defaultTextFormat = tf;			//t.backgroundColor = 0xffffff;			//t.background = true;			t.x = hero.x;			t.y = 240;			t.autoSize = TextFieldAutoSize.CENTER;			t.x -= t.width/2;			bottomText = t;			this.addChild(bottomText);		}				function update(e:Event):void {			followHero();			if(!wantExit) {				if(topText) topText.x = hero.x - topText.width/2;				if(bottomText) bottomText.x = hero.x - bottomText.width/2;			}			if(hero.x > 3100 && gameInProgress) {				gameCompleted();			}		}				function followHero():void {			if(hero.x > 240  && hero.x < ground.width-240) {				this.x = 240-hero.x;				bg.x = -this.x/2;			}		}				public function handleKeyDown(k:uint):void {			if(!gameInProgress) {				if(k == Keyboard.SPACE) {					if(wantExit) {						// nothing					} else {						sSelect.play();						this.reset();					}				}				return;			}			switch(k) {				case Keyboard.RIGHT:					hero.moveRight = true;					break;				case Keyboard.LEFT:					hero.moveLeft = true;					break;				case Keyboard.UP:					hero.jump = true;					if(pet.hero) {						bottomText.text = "";					}					break;				case Keyboard.SPACE:					if(!pet.hero) {						var dx = hero.x - pet.x;						if(dx < 50 && dx > -50) {							sTake.play();							pet.hero = hero;							pet.vy = -2;							pet.jumpInProgress = true;							bottomText.text = "Press UP to jump";						}					}					break;			}		}				public function handleKeyUp(k:uint):void {			//if(!gameInProgress) return;			switch(k) {				case Keyboard.RIGHT:					if(hero.x < 3100) {						hero.moveRight = false;					}					break;				case Keyboard.LEFT:					hero.moveLeft = false;					break;				case Keyboard.UP:					hero.jump = false;					break;			}		}				public function gameOver():void {			sHurt.play();			gameInProgress = false;			addTopText();			hero.alpha = 0;			topText.text = "Oops, monster ate you";			bottomText.text = "Press SPACE to restart";		}		public function gameCompleted():void {			sDone.play();			gameInProgress = false;			wantExit = true;			addTopText();			topText.x = welcome.x-5;			topText.y -= 40;			topText.text = "Hooray!";			bottomText.x = welcome.x-5;			bottomText.text = "Thanks for playing!";			hero.jump = true;			welcome.gotoAndStop(2);		}		public function reset():void {			if(topText) this.removeChild(topText);			this.x = 0;			bg.reset();			ground.reset();			hero.reset();			wife.reset();			pet.reset();			gameInProgress = true;			bottomText.text = "";		}	}}